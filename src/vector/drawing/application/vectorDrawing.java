/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vector.drawing.application;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.PopupMenu;
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author adelm
 */
public class vectorDrawing extends javax.swing.JFrame {

    /**
     * Creates new form vectorDrawing
     */
    public vectorDrawing() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton6 = new javax.swing.JButton();
        jMenuItem1 = new javax.swing.JMenuItem();
        jFileChooser1 = new javax.swing.JFileChooser();
        colorizeConfiguration = new javax.swing.JDialog();
        redbutton = new javax.swing.JButton();
        blueButton = new javax.swing.JButton();
        greenColor = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        pinkButton = new javax.swing.JButton();
        purpleButton = new javax.swing.JButton();
        yellowButton = new javax.swing.JButton();
        greyButton = new javax.swing.JButton();
        orangeButton = new javax.swing.JButton();
        blackButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        borderCheckbox = new javax.swing.JCheckBox();
        fillCheckbox = new javax.swing.JCheckBox();
        moveConfiguration = new javax.swing.JDialog();
        upButton = new javax.swing.JButton();
        leftButton = new javax.swing.JButton();
        rightButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        rectangleButton = new javax.swing.JButton();
        triangleButton = new javax.swing.JButton();
        ellipseButton = new javax.swing.JButton();
        squareButton = new javax.swing.JButton();
        lineButton = new javax.swing.JButton();
        circleButton = new javax.swing.JButton();
        undoButton = new javax.swing.JButton();
        redoButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        editButton = new javax.swing.JButton();
        movebutton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        background = new MyCanvas();
        colorizeButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        drawButton = new javax.swing.JToggleButton();

        jButton6.setText("jButton6");

        jMenuItem1.setText("jMenuItem1");

        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        redbutton.setBackground(new java.awt.Color(255, 0, 0));
        redbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redbuttonActionPerformed(evt);
            }
        });

        blueButton.setBackground(new java.awt.Color(0, 0, 255));
        blueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueButtonActionPerformed(evt);
            }
        });

        greenColor.setBackground(new java.awt.Color(0, 153, 0));
        greenColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenColorActionPerformed(evt);
            }
        });

        jLabel2.setText("  Choose your Color:");

        pinkButton.setBackground(new java.awt.Color(255, 153, 255));
        pinkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pinkButtonActionPerformed(evt);
            }
        });

        purpleButton.setBackground(new java.awt.Color(204, 51, 255));
        purpleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purpleButtonActionPerformed(evt);
            }
        });

        yellowButton.setBackground(new java.awt.Color(255, 255, 51));
        yellowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yellowButtonActionPerformed(evt);
            }
        });

        greyButton.setBackground(new java.awt.Color(153, 153, 153));
        greyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greyButtonActionPerformed(evt);
            }
        });

        orangeButton.setBackground(new java.awt.Color(255, 153, 51));
        orangeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orangeButtonActionPerformed(evt);
            }
        });

        blackButton.setBackground(new java.awt.Color(0, 0, 0));
        blackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Choose what exactly you want to color");

        borderCheckbox.setText("Border");
        borderCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borderCheckboxActionPerformed(evt);
            }
        });

        fillCheckbox.setText("Fill Shape");
        fillCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout colorizeConfigurationLayout = new javax.swing.GroupLayout(colorizeConfiguration.getContentPane());
        colorizeConfiguration.getContentPane().setLayout(colorizeConfigurationLayout);
        colorizeConfigurationLayout.setHorizontalGroup(
            colorizeConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorizeConfigurationLayout.createSequentialGroup()
                .addGroup(colorizeConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(colorizeConfigurationLayout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(colorizeConfigurationLayout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(redbutton)
                        .addGap(37, 37, 37)
                        .addComponent(purpleButton)
                        .addGap(37, 37, 37)
                        .addComponent(yellowButton))
                    .addGroup(colorizeConfigurationLayout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(pinkButton)
                        .addGap(37, 37, 37)
                        .addComponent(orangeButton)
                        .addGap(37, 37, 37)
                        .addComponent(blackButton))
                    .addGroup(colorizeConfigurationLayout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addGroup(colorizeConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(colorizeConfigurationLayout.createSequentialGroup()
                                .addComponent(borderCheckbox)
                                .addGap(52, 52, 52)
                                .addComponent(fillCheckbox))
                            .addComponent(jLabel3)
                            .addGroup(colorizeConfigurationLayout.createSequentialGroup()
                                .addComponent(greyButton)
                                .addGap(37, 37, 37)
                                .addComponent(blueButton)
                                .addGap(37, 37, 37)
                                .addComponent(greenColor)))))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        colorizeConfigurationLayout.setVerticalGroup(
            colorizeConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorizeConfigurationLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(colorizeConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fillCheckbox)
                    .addComponent(borderCheckbox))
                .addGap(4, 4, 4)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(colorizeConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(greyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blueButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(greenColor, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(colorizeConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(redbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(purpleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yellowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(colorizeConfigurationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(blackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pinkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orangeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        moveConfiguration.setBackground(new java.awt.Color(255, 255, 255));
        moveConfiguration.setMinimumSize(new java.awt.Dimension(120, 200));
        moveConfiguration.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        upButton.setBackground(new java.awt.Color(255, 255, 255));
        upButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vector/drawing/application/up.png"))); // NOI18N
        upButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });
        moveConfiguration.getContentPane().add(upButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 50, 42, 50));

        leftButton.setBackground(new java.awt.Color(255, 255, 255));
        leftButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vector/drawing/application/left.png"))); // NOI18N
        leftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftButtonActionPerformed(evt);
            }
        });
        moveConfiguration.getContentPane().add(leftButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 51, 45));

        rightButton.setBackground(new java.awt.Color(255, 255, 255));
        rightButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vector/drawing/application/right.png"))); // NOI18N
        rightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightButtonActionPerformed(evt);
            }
        });
        moveConfiguration.getContentPane().add(rightButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, 48, -1));

        downButton.setBackground(new java.awt.Color(255, 255, 255));
        downButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vector/drawing/application/down.png"))); // NOI18N
        downButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });
        moveConfiguration.getContentPane().add(downButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, 44, 58));

        jLabel13.setText("Move Your Shape :");
        moveConfiguration.getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, -1, -1));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rectangleButton.setText("Rectangle");
        rectangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleButtonActionPerformed(evt);
            }
        });

        triangleButton.setText("Triangle");
        triangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangleButtonActionPerformed(evt);
            }
        });

        ellipseButton.setText("Ellipse");
        ellipseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ellipseButtonActionPerformed(evt);
            }
        });

        squareButton.setText("Square");
        squareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squareButtonActionPerformed(evt);
            }
        });

        lineButton.setText("Line Segment");
        lineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineButtonActionPerformed(evt);
            }
        });

        circleButton.setText("Circle");
        circleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleButtonActionPerformed(evt);
            }
        });

        undoButton.setText("Undo");
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });

        redoButton.setText("Redo");
        redoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Shape");

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        movebutton.setText("Move");
        movebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movebuttonActionPerformed(evt);
            }
        });

        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        background.setBackground(new java.awt.Color(255, 255, 255));
        background.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout backgroundLayout = new javax.swing.GroupLayout(background);
        background.setLayout(backgroundLayout);
        backgroundLayout.setHorizontalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 558, Short.MAX_VALUE)
        );
        backgroundLayout.setVerticalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 188, Short.MAX_VALUE)
        );

        colorizeButton.setText("Colorize");
        colorizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorizeButtonActionPerformed(evt);
            }
        });

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        drawButton.setText("Draw");
        drawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(drawButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(circleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(lineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(squareButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(ellipseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(triangleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(rectangleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(deleteButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(copyButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(colorizeButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(movebutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jComboBox1, 0, 159, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(undoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(redoButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(circleButton)
                        .addComponent(loadButton)
                        .addComponent(drawButton))
                    .addComponent(lineButton)
                    .addComponent(squareButton)
                    .addComponent(ellipseButton)
                    .addComponent(triangleButton)
                    .addComponent(rectangleButton))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(undoButton)
                            .addComponent(redoButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(movebutton)
                            .addComponent(editButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(copyButton)
                            .addComponent(colorizeButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rectangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleButtonActionPerformed
        // TODO add your handling code here:

        MyCanvas c = (MyCanvas) background;
        Rectangle r = new Rectangle();
        if (r.result == JOptionPane.OK_OPTION) {
            c.addShape(r);
            jComboBox1.addItem(objectCounter + ".Rectangle");
            objectCounter++;

        }
    }//GEN-LAST:event_rectangleButtonActionPerformed

    private void ellipseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ellipseButtonActionPerformed
        // TODO add your handling code here:

        MyCanvas c = (MyCanvas) background;
        Ellipse e = new Ellipse();
        if (e.result == JOptionPane.OK_OPTION) {
            c.addShape(e);
            jComboBox1.addItem(objectCounter + ".Ellipse");
            objectCounter++;

    }//GEN-LAST:event_ellipseButtonActionPerformed

    }
    private void lineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineButtonActionPerformed
        // TODO add your handling code here:

        MyCanvas c = (MyCanvas) background;
        LineSegment l = new LineSegment();
        if (l.result == JOptionPane.OK_OPTION) {
            c.addShape(l);
            jComboBox1.addItem(objectCounter + ".LineSegment");
            objectCounter++;

        }


    }//GEN-LAST:event_lineButtonActionPerformed

    private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
        // TODO add your handling code here:

        MyCanvas canvas = (MyCanvas) background;
        int i = jComboBox1.getItemCount() - 1;
        jComboBox1.removeItemAt(i);
        canvas.undo();
        objectCounter--;


    }//GEN-LAST:event_undoButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:

        int i = jComboBox1.getSelectedIndex();
        MyCanvas canvas = (MyCanvas) background;
        canvas.undoneShapes.add(canvas.shapes.get(i));
        canvas.removeShape(canvas.shapes.get(i));

        jComboBox1.removeItemAt(i);
        objectCounter--;

        background.repaint();


    }//GEN-LAST:event_deleteButtonActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void circleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleButtonActionPerformed
        // TODO add your handling code here:

        MyCanvas canvas = (MyCanvas) background;
        Circle c = new Circle();
        if (c.result == JOptionPane.OK_OPTION) {
            canvas.addShape(c);
            jComboBox1.addItem(objectCounter + ".Circle");
            objectCounter++;

        }

    }//GEN-LAST:event_circleButtonActionPerformed

    private void squareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squareButtonActionPerformed

        // TODO add your handling code here:
        MyCanvas c = (MyCanvas) background;
        Square s = new Square();
        if (s.result == JOptionPane.OK_OPTION) {
            c.addShape(s);

            s.getProperties();

            jComboBox1.addItem(objectCounter + ".Square");
            objectCounter++;

        }
    }//GEN-LAST:event_squareButtonActionPerformed

    private void greenColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenColorActionPerformed
        // TODO add your handling code here:
        int i = jComboBox1.getSelectedIndex();
        MyCanvas canvas = (MyCanvas) background;
        if (borderCheckbox.isSelected()) {
            canvas.shapes.get(i).setFillColor(Color.GREEN);
        }
        if (fillCheckbox.isSelected()) {
            canvas.shapes.get(i).setColor(Color.GREEN);
        }

        background.repaint();

    }//GEN-LAST:event_greenColorActionPerformed

    private void blueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueButtonActionPerformed
        // TODO add your handling code here:
        int i = jComboBox1.getSelectedIndex();
        MyCanvas canvas = (MyCanvas) background;
        if (borderCheckbox.isSelected()) {
            canvas.shapes.get(i).setFillColor(Color.BLUE);
        }
        if (fillCheckbox.isSelected()) {
            canvas.shapes.get(i).setColor(Color.BLUE);
        }

        background.repaint();

    }//GEN-LAST:event_blueButtonActionPerformed

    private void redbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redbuttonActionPerformed
        // TODO add your handling code here:
        int i = jComboBox1.getSelectedIndex();
        MyCanvas canvas = (MyCanvas) background;
        if (borderCheckbox.isSelected()) {
            canvas.shapes.get(i).setFillColor(Color.RED);
        }
        if (fillCheckbox.isSelected()) {
            canvas.shapes.get(i).setColor(Color.RED);
        }

        background.repaint();

    }//GEN-LAST:event_redbuttonActionPerformed

    private void colorizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorizeButtonActionPerformed
        // TODO add your handling code here:
        colorizeConfiguration.setVisible(true);
        colorizeConfiguration.setSize(350, 350);
        colorizeConfiguration.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_colorizeButtonActionPerformed

    private void movebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movebuttonActionPerformed
        // TODO add your handling code here:

        moveConfiguration.setVisible(true);
        moveConfiguration.setSize(260, 260);
        moveConfiguration.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

    }//GEN-LAST:event_movebuttonActionPerformed

    private void leftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftButtonActionPerformed
        // TODO add your handling code here:
        int i = jComboBox1.getSelectedIndex();
        MyCanvas canvas = (MyCanvas) background;
        Point p = canvas.shapes.get(i).getPosition();
        p.x -= 5;

        canvas.shapes.get(i).setPosition(p);
        background.repaint();
    }//GEN-LAST:event_leftButtonActionPerformed

    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upButtonActionPerformed
        // TODO add your handling code here:
        int i = jComboBox1.getSelectedIndex();
        MyCanvas canvas = (MyCanvas) background;
        Point p = canvas.shapes.get(i).getPosition();
        p.y -= 5;

        canvas.shapes.get(i).setPosition(p);
        background.repaint();
    }//GEN-LAST:event_upButtonActionPerformed

    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downButtonActionPerformed
        // TODO add your handling code here:
        int i = jComboBox1.getSelectedIndex();
        MyCanvas canvas = (MyCanvas) background;
        Point p = canvas.shapes.get(i).getPosition();
        p.y += 5;

        canvas.shapes.get(i).setPosition(p);
        background.repaint();
    }//GEN-LAST:event_downButtonActionPerformed

    private void rightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightButtonActionPerformed
        // TODO add your handling code here:
        int i = jComboBox1.getSelectedIndex();
        MyCanvas canvas = (MyCanvas) background;
        Point p = canvas.shapes.get(i).getPosition();
        p.x += 5;

        canvas.shapes.get(i).setPosition(p);
        background.repaint();
    }//GEN-LAST:event_rightButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:

        int j = jComboBox1.getSelectedIndex();
        MyCanvas canvas = (MyCanvas) background;
        Map<String, Double> map = canvas.shapes.get(j).getProperties();

        /* try {
            Shape shape;
            Color c = canvas.shapes.get(i).getColor();
            Color fc = canvas.shapes.get(i).getFillColor();
            shape = canvas.shapes.get(i).getClass().newInstance();
            canvas.shapes.remove(i);
            shape.setColor(c);
            shape.setFillColor(fc);

            canvas.shapes.add(i, shape);
            canvas.repaint();
        } catch (InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(vectorDrawing.class.getName()).log(Level.SEVERE, null, ex);
        }

         */
        JLabel[] labels = new JLabel[5];
        JTextField[] textFields = new JTextField[5];

        JPanel myPanel = new JPanel();
int i=0;
        for (String key : map.keySet()) {
            labels[i] = new JLabel(key);
            textFields[i] = new JTextField("0");
            myPanel.add(labels[i]);
            myPanel.add(textFields[i]);
            i++;
        }

        int result = JOptionPane.showConfirmDialog(null, myPanel,
                "Please Enter X and Y Values", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            i = 0;
            for (String key : map.keySet()) {

                map.put(key, Double.parseDouble(textFields[i].getText()));
                i++;
                
                canvas.shapes.get(j).setProperties(map);
                canvas.repaint();
            }
        }


        
    }//GEN-LAST:event_editButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        // TODO add your handling code here:

        MyCanvas canvas = (MyCanvas) this.background;
        int i = jComboBox1.getSelectedIndex();

        Shape copied = null;

        Point p = new Point();

        JTextField xNewText = new JTextField(5);
        JTextField yNewText = new JTextField(5);

        int x = 0;
        int y = 0;
        xNewText.setText("" + x);
        yNewText.setText("" + y);
        JPanel myPanel = new JPanel();
        myPanel.add(new JLabel("New x:"));
        myPanel.add(xNewText);
        myPanel.add(Box.createHorizontalStrut(15)); // a spacer 
        myPanel.add(new JLabel("New y:"));
        myPanel.add(yNewText);
        myPanel.add(Box.createHorizontalStrut(15));

        int result = JOptionPane.showConfirmDialog(null, myPanel,
                "Please The New Loacation", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {

            x = Integer.parseInt(xNewText.getText());
            y = Integer.parseInt(yNewText.getText());

            p = new Point(x, y);
        }

        try {
            copied = (Shape) canvas.shapes.get(i).clone();
            copied.setPosition(p);

            canvas.addShape(copied);
            canvas.repaint();
        } catch (CloneNotSupportedException ex) {
            Logger.getLogger(vectorDrawing.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.jComboBox1.addItem("" + objectCounter++ + "." + copied.getClass().getSimpleName());


    }//GEN-LAST:event_copyButtonActionPerformed

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    private void redoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoButtonActionPerformed
        // TODO add your handling code here:

        MyCanvas canvas = (MyCanvas) background;
        String name = canvas.undoneShapes.get(canvas.undoneShapes.size() - 1).getClass().getSimpleName();
        jComboBox1.addItem(objectCounter + "." + name);
        objectCounter++;
        canvas.redo();

    }//GEN-LAST:event_redoButtonActionPerformed

    private void pinkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pinkButtonActionPerformed
        // TODO add your handling code here:
        int i = jComboBox1.getSelectedIndex();
        MyCanvas canvas = (MyCanvas) background;
        if (borderCheckbox.isSelected()) {
            canvas.shapes.get(i).setFillColor(Color.PINK);
        }
        if (fillCheckbox.isSelected()) {
            canvas.shapes.get(i).setColor(Color.PINK);
        }

        background.repaint();

    }//GEN-LAST:event_pinkButtonActionPerformed

    private void purpleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purpleButtonActionPerformed
        // TODO add your handling code here:
        int i = jComboBox1.getSelectedIndex();
        MyCanvas canvas = (MyCanvas) background;
        if (borderCheckbox.isSelected()) {
            canvas.shapes.get(i).setFillColor(Color.MAGENTA);
        }
        if (fillCheckbox.isSelected()) {
            canvas.shapes.get(i).setColor(Color.MAGENTA);
        }

        background.repaint();

    }//GEN-LAST:event_purpleButtonActionPerformed

    private void yellowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yellowButtonActionPerformed
        // TODO add your handling code here:
        int i = jComboBox1.getSelectedIndex();
        MyCanvas canvas = (MyCanvas) background;
        if (borderCheckbox.isSelected()) {
            canvas.shapes.get(i).setFillColor(Color.YELLOW);
        }
        if (fillCheckbox.isSelected()) {
            canvas.shapes.get(i).setColor(Color.YELLOW);
        }

        background.repaint();

    }//GEN-LAST:event_yellowButtonActionPerformed

    private void greyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greyButtonActionPerformed
        // TODO add your handling code here:
        int i = jComboBox1.getSelectedIndex();
        MyCanvas canvas = (MyCanvas) background;
        if (borderCheckbox.isSelected()) {
            canvas.shapes.get(i).setFillColor(Color.GRAY);
        }
        if (fillCheckbox.isSelected()) {
            canvas.shapes.get(i).setColor(Color.GRAY);
        }

        background.repaint();
    }//GEN-LAST:event_greyButtonActionPerformed

    private void blackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackButtonActionPerformed
        // TODO add your handling code here:
        int i = jComboBox1.getSelectedIndex();
        MyCanvas canvas = (MyCanvas) background;
        if (borderCheckbox.isSelected()) {
            canvas.shapes.get(i).setFillColor(Color.BLACK);
        }
        if (fillCheckbox.isSelected()) {
            canvas.shapes.get(i).setColor(Color.BLACK);
        }

        background.repaint();

    }//GEN-LAST:event_blackButtonActionPerformed

    private void orangeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orangeButtonActionPerformed
        // TODO add your handling code here:
        int i = jComboBox1.getSelectedIndex();
        MyCanvas canvas = (MyCanvas) background;
        if (borderCheckbox.isSelected()) {
            canvas.shapes.get(i).setFillColor(Color.ORANGE);
        }
        if (fillCheckbox.isSelected()) {
            canvas.shapes.get(i).setColor(Color.ORANGE);
        }

        background.repaint();

    }//GEN-LAST:event_orangeButtonActionPerformed

    private void triangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triangleButtonActionPerformed
        // TODO add your handling code here:

        MyCanvas c = (MyCanvas) background;
        Triangle t = new Triangle();
        if (t.result == JOptionPane.OK_OPTION) {
            c.addShape(t);
            jComboBox1.addItem(objectCounter + ".Triangle");
            objectCounter++;

        }
    }//GEN-LAST:event_triangleButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        // TODO add your handling code here:

        int loadCounter = 1;

        MyCanvas canvas = (MyCanvas) background;
        FileNameExtensionFilter filter = new FileNameExtensionFilter("jar files", "jar");
        jFileChooser1.setFileFilter(filter);
        jFileChooser1.showOpenDialog(null);
        File j = jFileChooser1.getSelectedFile();
        String name = javax.swing.JOptionPane.showInputDialog("Enter name: ");

        try {
            URL url = j.toURL();
            URL[] urls = new URL[]{url};
            ClassLoader cl = new URLClassLoader(urls);
            Class myClass = Class.forName(name, true, cl);
            canvas.installPluginShape(myClass);
            jComboBox2.addItem(loadCounter + myClass.getSimpleName());

        } catch (MalformedURLException | ClassNotFoundException ex) {
            Logger.getLogger(vectorDrawing.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_loadButtonActionPerformed

    private void borderCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borderCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_borderCheckboxActionPerformed

    private void fillCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fillCheckboxActionPerformed

    private void drawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawButtonActionPerformed
        // TODO add your handling code here:

        MyCanvas canvas = (MyCanvas) background;
        jComboBox1.addItem(objectCounter + "." + jComboBox2.getSelectedItem().toString());
        Class rf = canvas.getSuppotedShapes().get(jComboBox2.getSelectedIndex());

        try {

            Constructor constructor = rf.getDeclaredConstructor();
            constructor.setAccessible(false);
            current = (Shape) constructor.newInstance();
            Map<String, Double> map = current.getProperties();

            JTextField xField = new JTextField(5);
            JTextField yField = new JTextField(5);
            JLabel[] labels = new JLabel[5];
            JTextField[] textFields = new JTextField[5];

            int x = 0;
            int y = 0;

            JPanel myPanel = new JPanel();
            xField.setText("" + x);
            yField.setText("" + y);

            myPanel.add(new JLabel("x:"));
            myPanel.add(xField);
            myPanel.add(Box.createHorizontalStrut(15));
            myPanel.add(new JLabel("y:"));
            myPanel.add(yField);
            myPanel.add(Box.createHorizontalStrut(15));
            int i = 0;
            for (String key : map.keySet()) {
                labels[i] = new JLabel(key);
                textFields[i] = new JTextField("0");
                myPanel.add(labels[i]);
                myPanel.add(textFields[i]);
                i++;
            }

            int result = JOptionPane.showConfirmDialog(null, myPanel,
                    "Please Enter X and Y Values", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {
                i = 0;
                for (String key : map.keySet()) {

                    map.put(key, Double.parseDouble(textFields[i].getText()));
                    i++;
                }

                x = Integer.parseInt(xField.getText());
                y = Integer.parseInt(yField.getText());
                Point p = new Point(x, y);
                current.setPosition(p);
                current.setProperties(map);
                canvas.addShape(current);
            }

        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {
            Logger.getLogger(vectorDrawing.class.getName()).log(Level.SEVERE, null, ex);
        }
        objectCounter++;

    }//GEN-LAST:event_drawButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    /**
     * @param args the command line arguments /*
     */
    /**
     *
     * @param args
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(vectorDrawing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(vectorDrawing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(vectorDrawing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(vectorDrawing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new vectorDrawing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JButton blackButton;
    private javax.swing.JButton blueButton;
    private javax.swing.JCheckBox borderCheckbox;
    private javax.swing.JButton circleButton;
    private javax.swing.JButton colorizeButton;
    private javax.swing.JDialog colorizeConfiguration;
    private javax.swing.JButton copyButton;
    public javax.swing.JButton deleteButton;
    private javax.swing.JButton downButton;
    private javax.swing.JToggleButton drawButton;
    private javax.swing.JButton editButton;
    private javax.swing.JButton ellipseButton;
    private javax.swing.JCheckBox fillCheckbox;
    private javax.swing.JButton greenColor;
    private javax.swing.JButton greyButton;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JButton leftButton;
    private javax.swing.JButton lineButton;
    private javax.swing.JButton loadButton;
    private javax.swing.JDialog moveConfiguration;
    private javax.swing.JButton movebutton;
    private javax.swing.JButton orangeButton;
    private javax.swing.JButton pinkButton;
    private javax.swing.JButton purpleButton;
    private javax.swing.JButton rectangleButton;
    private javax.swing.JButton redbutton;
    private javax.swing.JButton redoButton;
    private javax.swing.JButton rightButton;
    private javax.swing.JButton squareButton;
    private javax.swing.JButton triangleButton;
    private javax.swing.JButton undoButton;
    private javax.swing.JButton upButton;
    private javax.swing.JButton yellowButton;
    // End of variables declaration//GEN-END:variables
public static int objectCounter = 1;
    private Shape current;

}
